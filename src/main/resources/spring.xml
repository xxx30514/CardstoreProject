<?xml version="1.0" encoding="utf-8"?>


<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-2.5.xsd  http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- 掃描組件(除控制層) -->
	<context:component-scan base-package="cardstore">
	<!--context:exclude-filter:排除掃描
		以註解來排除掃描某種類  type="annotation" 
		expression="org.springframework.stereotype.Controller" 註解名
		排除掃描@Controller
		以類名排除掃描某類 type="assignable"
		expression="cardstore.controller.TestController" 全類名
		context:include-filter:包含掃描 
		需要在context:component-scan標籤內加上use-default-filters="false"屬性才會生效 不然預設情況下是掃描該package下的所有類
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		排除與包含僅能存在一種 排除比較常使用
	-->	
	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<!-- 配置資料庫來源 -->
	<!-- 引入jdbc.properties 引入後可用${key}存取value-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<!-- 配置交易管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
 		<property name="dataSource" ref="dataSource"></property>
 	</bean>
	<!-- 開啟事務註解驅動  transaction-manager="事務管理器id" 預設值:transactionManager 
	若事務管理器id為transactionManager 可以省略
 	將@Transactional註解標示的方法或類中所有方法進行事務管理 在service層進行事務管理
 	-->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- 配置SqlSessionFactoryBean ,直接在Spring的IOC容器中獲取SqlSessionFactory物件-->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--設置mybatis核心配置文件的路徑  -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!-- 設置資料庫來源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 設置類型別名對應的package -->
		<property name="typeAliasesPackage" value="cardstore.pojo"></property>
		<!-- 設置映射文件路徑 僅有映射文件的package與mapper介面的package不同才需要設置 -->
		<!-- <property name="mapperLocations" value="classpath:cardstore/mapper/*.xml"></property> -->
	</bean>
	<!-- 配置mapper介面的掃瞄 ,將指定package下的mapper介面,透過SqlSession創建代理實現類物件,並將這些物件交給IOC容器管理 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cardstore.mapper"></property>
	</bean>
</beans>